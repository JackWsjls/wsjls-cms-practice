<script src="/common/markdown/marked.js"></script> 
<script src="/common/markdown/ace/ace.js"></script>
<style>
#toolbar {
    height: 50px;
    background-color: #444;
    width: 100%;
    color: #fff;
    line-height: 50px;
}
#editor-container {
	height: 100%;
/*    overflow: auto;
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    top: 50px;*/
}
#editor-column,
#preview-column {
    width: 49.5%;
    height: 100%;
    overflow: auto;
    position: relative;
    background-color: #fff;
}
.pull-left {
    float: left;
}

.pull-right {
    float: right;
}
#mdeditor,#preview,#panel-editor,#panel-preview{
    height: 100%;
    width: 100%;
}
#toolbar select {
	color: #000000;
}
</style>
<div class="my_container">
	<%- include("../component/header") %>
	<div class="main_content">
	    <div class="home_content">
	    	<div class="freemarker_content">
				<div id='toolbar'>
					<button class="btn btn-default" onclick="insertText('**?**')">加粗</button>
					<button class="btn btn-default" onclick="insertText('_?_')">斜体</button>
					<button class="btn btn-default" onclick="insertText('>')">引用</button>
					设置:
					<select id="theme" size="1">
					   <optgroup label="Bright">
					       <option value="ace/theme/chrome">Chrome</option>
					       <option value="ace/theme/clouds">Clouds</option>
					       <option value="ace/theme/crimson_editor">Crimson Editor</option>
					       <option value="ace/theme/dawn">Dawn</option>
					       <option value="ace/theme/dreamweaver">Dreamweaver</option>
					       <option value="ace/theme/eclipse">Eclipse</option>
					       <option value="ace/theme/github">GitHub</option>
					       <option value="ace/theme/iplastic">IPlastic</option>
					       <option value="ace/theme/solarized_light">Solarized Light</option>
					       <option value="ace/theme/textmate">TextMate</option>
					       <option value="ace/theme/tomorrow">Tomorrow</option>
					       <option value="ace/theme/xcode">XCode</option>
					       <option value="ace/theme/kuroir">Kuroir</option>
					       <option value="ace/theme/katzenmilch">KatzenMilch</option>
					       <option value="ace/theme/sqlserver">SQL Server</option>
					   </optgroup>
					   <optgroup label="Dark">
					       <option value="ace/theme/ambiance">Ambiance</option>
					       <option value="ace/theme/chaos">Chaos</option>
					       <option value="ace/theme/clouds_midnight">Clouds Midnight</option>
					       <option value="ace/theme/cobalt">Cobalt</option>
					       <option value="ace/theme/gruvbox">Gruvbox</option>
					       <option value="ace/theme/idle_fingers">idle Fingers</option>
					       <option value="ace/theme/kr_theme">krTheme</option>
					       <option value="ace/theme/merbivore">Merbivore</option>
					       <option value="ace/theme/merbivore_soft">Merbivore Soft</option>
					       <option value="ace/theme/mono_industrial">Mono Industrial</option>
					       <option value="ace/theme/monokai">Monokai</option>
					       <option value="ace/theme/pastel_on_dark">Pastel on dark</option>
					       <option value="ace/theme/solarized_dark">Solarized Dark</option>
					       <option value="ace/theme/terminal">Terminal</option>
					       <option value="ace/theme/tomorrow_night">Tomorrow Night</option>
					       <option value="ace/theme/tomorrow_night_blue">Tomorrow Night Blue</option>
					       <option value="ace/theme/tomorrow_night_bright">Tomorrow Night Bright</option>
					       <option value="ace/theme/tomorrow_night_eighties">Tomorrow Night 80s</option>
					       <option value="ace/theme/twilight">Twilight</option>
					       <option value="ace/theme/vibrant_ink">Vibrant Ink</option>
					   </optgroup>
					</select>
					字体大小
					<select id="fontsize" size="1">
					   <option value="10px">10px</option>
					   <option value="11px">11px</option>
					   <option value="12px" selected="selected">12px</option>
					   <option value="13px">13px</option>
					   <option value="14px">14px</option>
					   <option value="16px">16px</option>
					   <option value="18px">18px</option>
					   <option value="20px">20px</option>
					   <option value="24px">24px</option>
					</select> 
					代码折行
					<select id="folding" size="1">
					   <option value="manual">manual</option>
					   <option value="markbegin" selected="selected">mark begin</option>
					   <option value="markbeginend">mark begin and end</option>
					</select>
					自动换行
					<select id="soft_wrap" size="1">
					   <option value="off">Off</option>
					   <option value="40">40 Chars</option>
					   <option value="80">80 Chars</option>
					   <option value="free">Free</option>
					</select>
					全选样式<input type="checkbox" name="select_style" id="select_style" checked=""> 
					光标行高光<input type="checkbox" name="highlight_active" id="highlight_active" checked="">
					显示行号<input type="checkbox" id="show_gutter" checked=""> 
					打印边距<input type="checkbox" id="show_print_margin" checked="">
				</div>
		        <div id='editor-container'>
					<div id='editor-column' class='pull-left'>
			            <div id='panel-editor'>
			                <!--编辑区-->
			                <div class="editor-content" id="mdeditor" >
			freemarker语法介绍及其入门教程实例 <br/>
			FreeMarker标签使用 <br/>
			一、FreeMarker模板文件主要有4个部分组成<br/>
			  1、文本，直接输出的部分
			  2、注释，即<#--...-->格式不会输出
			  3、插值（Interpolation）：即${..}或者#{..}格式的部分,将使用数据模型中的部分替代输出
			  4、FTL指令：FreeMarker指令，和HTML标记类似，名字前加#予以区分，不会输出。
			  
			  FTL指令规则
			    FreeMarker有三种FTL标签，这和HTML的标签是完全类似的
			     开始标签：<#directivename parameters>
			     结束标签：</#directivename>
			     空标签： <#directivename parameters />
			     实际上，使用标签时前面的#符号也可能变成@，如果该指令是一个用户指令而不是系统内建指令时，应将#符号改为@符号
			  
			   插值规则
			     FreeMarker的插值有如下两种类型
			     1、通用插值：${expr}
			     2、数字格式化插值：#{expr}或者#{expr;format}
			    
			    通用插值，有可以分为四种情况
			    a、插值结果为字符串值：直接输出表达式结果
			    b、插值结果为数字值：根据默认格式(#setting 指令设置)将表达式结果转换成文本输出。可以使用内建的字符串函数格式单个插值，例如

			[xml] view plain copy
			<#setting number_format = "currency" />  
			<#assign price = 42 />  
			${price}  
			${price?string}  
			${price?string.number}  
			${price?string.currency}  
			${price?string.percent}   
			   c、输出值为日期值：根据默认格式(由 #setting 指令设置)将表达式结果转换成文本输出，可以使用内建的字符串函数格式化单个插值，例如

			[xml] view plain copy
			<#assign lastUpdated = "2009-01-07 15:05"?datetime("yyyy-MM-dd HH:mm") />  
			${lastUpdated?string("yyyy-MM-dd HH:mm:ss zzzz")};  
			${lastUpdated?string("EEE,MMM d,yy")};  
			${lastUpdated?string("EEEE,MMMM dd,yyyy,hh:mm:ss a '('zzz')'")};  
			${lastUpdated?string.short};  
			${lastUpdated?string.long};  
			${lastUpdated?String.full};  
			   d、插值结果为布尔值
			      <#assign foo=true />
			      ${foo?string("是foo","非foo")}
			      
			   数字格式化插值
			     数字格式化插值可采用#{expr;format}的形式来格式化数字，其中format可以是：
			     mX:小数部分最小X位
			     MX:小数部分最大X位
			     例如：

			[xml] view plain copy
			<#assign x = 2.582 />  
			<#assign y =4 />  
			#{x;M2};  
			#{y;M2};  
			#{x;m1};  
			#{y;m1};  
			#{x;m1M2};  
			#{y:m1M2};     <br/>
			二、表达式<br/>
			    表达式是FreeMarker的核心功能。表达式放置在插值语法（${...}）之中时，表面需要输出表达式的值，表达式语法也可以与FreeMarker标签结合，用于控制输出
			    1、直接指定值
			      例如：
			      a、字符串
			         ${'我的名字是\"yeek\"'};
			         ${"我的文件保存在d：\\盘"};
			      b、数值
			      c、布尔值
			      d、日期型
			         FreeMarker支持date、time、datetime三种类型，这三种类型的值无法直接指定，通常需要借助字符串的date、time、datetime三个内建函数进行转换才可以

			[xml] view plain copy
			<#assign test1 = "2009-01-22"?date("yyyy-MM-dd") />;  
			<#assign test2 ="16:34:43"?time("HH:mm:ss") />  
			<#assign test2 = "2009-01-22 17:23:45"?datetime("yyyy-MM-dd HH:mm:ss") />  
			${test1?string.full}  
			      e、集合
			        集合以方括号包括，各集合元素之间以英文逗号(,)分隔，看如下的示例:
			      <#list["星期一",,["星期二",["星期三",["星期四",["星期五"] as x>
			         ${s};
			        </#list>
			      f、Map集合
			         Map对象使用花括号包括，Map中的key-value对之间以英文冒号(:)隔开，多组key-value对之间以英文逗号(,) 隔开
			           例如

			[xml] view plain copy
			<#assign score = {"语文":78,"数学":83,"Java":89} >  
			  <#list score?key as x>  
			   ${x}--->${score[x]};  
			  </#list>   <span style="font-family:sans-serif, arial, verdana, 'trebuchet ms';line-height:1.6em;">  </span>  
			      2、输出变量值
			          FreeMarker的表达式输出变量时，这些变量可以是顶层变量，也可以是Map对象中的变量，还可以是集合中的变量，并可以使用点(.)语法来访问Java对象的属性
			          a、顶层变量

			[java] view plain copy
			Map root = new HashMap();  
			root.put("name","wenchao");  
			             对应顶层变量，直接使用${variableName}来输出变量值，变量名只能是数字、字母、下划线、$、@和#的组合，并不能以数字开头
			          b、输出集合元素
			             如果需要输出集合元素，则可以根据集合元素的索引来输出元素。集合元素的索引以方括号指定。
			             假设有集合对象为：["星期一","星期二","星期三","星期四","星期五","星期六"],该集合对象名为week, 如果需要输出星期三，则可以使用如下语法：
			                ${week[2]}
			             集合里的第一个元素的索引是0
			          c、输出Map元素
			              这里的Map对象可以是直接HashMap的实例，甚至包括 JavaBean实例，对应JavaBean实例，我们一样可以把其当成属性为key，属性为value的Map实例          
			      3、字符串操作
			         a、字符串链接
			           字符串连接有两种语法
			           A、使用${..}(或#{..})在字符串常量部分插入表达式的值，从而完成字符串连接
			           B、直接使用连接运算符（+）来连接字符串
			             使用第一种语法来连接字符串
			             ${"Hello,${user}!"}
			              第二种使用连接符号来连接字符串
			             ${"Hello,"+user+"!"};
			               值的注意的是，${..}只能用于文本部分，因此，下面的代码是错误的：
			                 <#if ${isBig}>Wow!</#if>
			                 <#if "${isBig}">Wow!</#if>
			                 应该写成：
			                 <#if isBig>Wow!</#if>
			         
			         b、截取字符串

			[java] view plain copy
			Map root = new HashMap();  
			root.put("domain","www.zuidaima.com");  
			  
			${domain[0]}  
			${domain[4]}  
			${domain[1..4]}           
			      4、集合连接运算符
			        这里所说的集合连接运算时将两个集合连接成一个新的集合，连接集合的运算符是+，例如
			        <#list ["星期一"," 星期二","星期三"]+["星期四","星期五"] as x>
			           ${x}
			        </#list>
			        
			      5、Map连接运算符
			             Map对象的连接运算也是将两个Map对象连接成一个新的Map对象，Map对象的连接运算符是+。如果两个Map对象具有相同的 key，则后加入Map里的key所
			         对应的value替代原来key所对应的value
			         
			      6、算术运算符
			         FreeMarker表达式中完全支持算术运算，FreeMarker支持的算术运算符包括： +，-，*，/，%
			         看如下代码示范

			[xml] view plain copy
			<#assign x = 5 />  
			${x* -100}  
			${x/2}  
			${12%10}  
			         在表达式中使用算术运算时要注意以下几点。
			         A、运算符两边的运算数必须是数字，因此下面的代码是错误的：
			           ${3*"5"}
			         B、使用+（既可以作为加号，也可以作为字符串连接运算符）运算时，如果一边是数字，一边是字符串，就会自动将数字转化为字符串。例如
			            ${3+"5"}
			            输出结果：35
			         C、使用内建的int函数可对数值取整。例如

			[xml] view plain copy
			<#assign x = 5>  
			${(x/2)?int}  
			${1.1?int}  
			${1.999?int}  
			${-1.9999?int}  
			${-1.1?int}  
			     
			       7、比较运算符
			           表达式中支持的比较运算符有如下几个
			           a、=（或者==）:判断两个值是否相等.
			           b、!=:判断两个值是否不相等
			           c、 >(或者gt):判断坐标值是否大于右边值
			           d、 >=(或者gte):判断坐标值是否大于等于右边值
			           e、 <(或者lt):判断左边值是否小于右边值
			           f、 <=(或者lte):判断左边值是否小于等于右边值       
			            
			       8、逻辑运算符
			          逻辑运算符有如下几个
			          a、逻辑与：&&
			          b、逻辑或：||
			          c、逻辑非：!
			          逻辑运算符只能作用于布尔值，否则将产生错误。
			          
			       9、内建函数
			          FreeMarker还提供了一些内建函数来转换输出，可以在任何变量后紧跟?,?后紧跟内建函数，就可通过内建函数来转换输出变量
			          下面是常用的内建的字符串函数
			          a、html：对字符串进行HTML编码
			          b、cap_first:将字符串第一个字母成大写
			          c、lower_case:将字符串转换成小写
			          d、upper_case:将字符串转换成大写
			          e、trim: 去掉字符串前后的空白字符
			          下面是集合的常用的内建函数
			          a、size： 获得序列中元素的数目
			          
			          下面是数字值的常用的内建函数
			          a、int 取得数字的整数部分
			          例如

			[xml] view plain copy
			<#assign test="Tom & Jerry" />  
			${test?html}  
			${test?upper_case?html}  
			          
			       10、空值处理运算符
			          FreeMarker对空值的处理非常严格，FreeMarker的变量必须有值，没有被赋值的变量就会抛出异常。     

			       11、运算符优先级<br/>
			          
			  三、FreeMarker 的常用指令<br/>
			     1、if指令
			        分支控制语句
			        语法格式如下

			[xml] view plain copy
			<#if condition>  
			     ....  
			<#elseif condition2>  
			   ...  
			<#elseif condition3>        
			   ...  
			<#else>  
			   ...  
			</#if>  
			     2、switch、case、default、break指令

			[xml] view plain copy
			<#switch value>  
			   <#case refValue>  
			      ...  
			      <#bread>  
			   <#case refValue>  
			      ...  
			      <#bread>  
			   <#default>  
			      ...  
			</#switch>  
			        虽然FreeMarker提供了switch指令，但它并不推荐使用switch指令来控制也输出，而是推荐使用FreeMarker的if..elseif..else 指令来替代它。
			        
			    3、list、break指令
			    list指令时一个典型的迭代输出指令，用于迭代输出数据模型中的集合。list指令的语法格式如下：

			[xml] view plain copy
			<#list sequence as item>  
			  ...  
			</#list>  

			      除此之外，迭代集合对象时，还包括两个特殊的循环变量：
			      a、item_index：当前变量的索引值。
			      b、item_has_next:是否存在下一个对象
			      也可以使用<#break>指令跳出迭代

			[xml] view plain copy
			<#list ["星期一","星期二","星期三","星期四","星期五"] as x>  
			    ${x_index +1}.${x} <#if x_has_next>,</#if>  
			    <#if x = "星期四"><#break></#if>  
			</#list>  
			      
			      4、include 指令
			        include指令的作用类似于JSP的包含指令，用于包含指定页，include指令的语法格式如下
			         <#include filename [options]
			          在上面的语法格式中，两个参数的解释如下
			          a、filename：该参数指定被包含的模板文件
			          b、options：该参数可以省略，指定包含时的选项，包含encoding和parse两个选项，encoding指定包含页面时所使用的解码集，而parse指定被
			             包含是否作为FTL文件来解析。如果省略了parse选项值，则该选项值默认是true
			     5、 import指令
			        该指令用于导入FreeMarker模板中的所有变量，并将该变量放置在指定的Map对象中，import 指令的语法格式如下
			        <#import path as mapObject>
			        在上面的语法格式中，path指定要被导入的模板文件，而mapObject是一个Map对象名，通过这行代码，将导致path模板中的所有变量都被放置
			        在mapObject中
			        <#import "/lib/common.ftl" as com>
			     
			     6、noparse指令
			         noparse指令指定FreeMarker不处理该指令里包含的内容，该指令的语法格式如下：
			         <#noparse>
			            ...
			         </#noparse>
			         
			     7、escape、noescape指令  

			     8、assign指令
			        它用于为该模板页面创建或替换一个顶层变量
			        
			     9、setting指令
			        该指令用于设置FreeMarker的运行环境，该指令的语法格式如下：
			        <#setting name = value>
			        name 的取值范围包括如下几个
			         locale ：该选项指定该模板所用的国家/语言选项
			         number_format:该选项指定格式化输出数字的格式
			         boolean_format:该选项指定两个布尔值的语法格式，默认值是"true、false"
			         date_format,time_format,datetime_format：该选项指定格式化输出日期的格式
			         time_zone:  设置格式化输出日期时所使用的时区
			     10、macro、nested、return指令
			                </div>
			            </div> 
			        </div>
			        <div id='preview-column' class='pull-right'>
			            <div id='panel-preview'>
			                <!--显示区-->
			                <div id="preview" class="markdown-body"></div>
			            </div>
			        </div>
				</div>
			</div>
			<!-- <div class="kd_data"></div> -->
	    </div>
	<%- include("../component/nav") %>
	</div>
</div>
<script>
    var acen_edit = ace.edit('mdeditor'); 
    acen_edit.setTheme('ace/theme/chrome');
    acen_edit.getSession().setMode('ace/mode/markdown');
    acen_edit.renderer.setShowPrintMargin(false);
    $("#mdeditor").keyup(function() {
        $("#preview").html(marked(acen_edit.getValue()));
    });

	function insertText(val){
        acen_edit.insert(val);//光标位置插入
    }
	$("#theme").change(function() {
	   acen_edit.setTheme($(this).val());
	})
	$("#fontsize").change(function() {
	   acen_edit.setFontSize($(this).val());
	}) 
	$("#folding").change(function() {
	   session.setFoldStyle($(this).val());
	})
	$("#select_style").change(function() {
	   acen_edit.setOption("selectionStyle", this.checked ? "line" : "text");
	})
	$("#highlight_active").change(function() {
	   acen_edit.setHighlightActiveLine(this.checked);
	})
	$("#soft_wrap").change(function() {
	   acen_edit.setOption("wrap", $(this).val());
	})
	$("#show_print_margin").change(function() {
	       acen_edit.renderer.setShowPrintMargin(this.checked);
	})
</script>
